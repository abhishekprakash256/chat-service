Two services one for the registration and other for the chat 

The access to pgsql and redis are handled by flask and go as per need 




Nextjs points are  -- /demo/chat

example -- 

https://meabhi.me/blog/section/project/article/chatapp.     in the nextjs for the chat app 



GO Endpoint are /chat-server/

https://meabhi.me/chat-server



services used -->

nextjs for url of the page /demo/chat/register. --> public

this should call the backend go server to pass the user_1 , user_2 , submit 

also should generate a hash can I just use the tinyurl api ? end point

The Flask access the redis to get the hash 

what will be the flask end point ? 

user1.   --> user1. in the flask , POST , this should access the GO server for regisgtration to access PGSQL

user2    --> user2 , in the flask , POST , this should access the GO server for regisgtration to access PGSQL

chat-server/register ---> register , in the GO used. --> internal


Json examples ------------->

data send in the backend for seding the data

data : {

userOne : "Abhi"
userTwo : "Anny"
hash : "abc123"

}

when succesfull --> 

data :
{
    status : OK 
    code : 200
}


data :
{
    status : FAIL
    code : 400
}





give the user out

nextjs page for login --> 

/demo/chat/user/<hash>   GET request. --> public

in the flask 

user       --->

login   --->    /chat-server/user/username/login.   ---> login the user , POST , Go server validates the data and let the user in  --> internal


send to the api

data : {

user : "Abhi"
hash : "abc123"

}

request to get the url

data :
{
    status : OK
    code : 200
}


message  ---> 

data : {

  "userHash": "abc123",
  "senderName": "Abhi",
  "reciever": "Anny",
  "message": "Hello",
  "timestamp": ISODate()

}

data : {
    status : OK
    code : 200
}

data : {
    status : Failed
    code : 400
}


inp --> message    ---> message goes to the go server through the POST request , redis check if the user is online , save the message in the postgresql and deliver the message  --> internal


/chat-server/user/<hash>/message_send  --> read the message and send the message through the backend of GO 


logout --> /chat-server/user/logout --> to nextjs server for logout , GET request. --> internal


endchat --> /chat-server/user/endchat    ---> to go server and nextjs to delelte the data and nextjs refreshers the page and route to register  . GET request. --> internal





Notes -- 

- https://gist.githubusercontent.com/patricksavalle/fac25ed914dc2e10f256fdba1af9e622/raw/cf4dd5dc6dc5bb2f7b3af6a2b64fa0fd77d73d34/ns-reference-api.yaml
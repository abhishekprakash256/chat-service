Two services one for the registration and other for the chat 

The access to pgsql and redis are handled by flask and go as per need 




Nextjs points are  -- /demo/chat

example -- 


Clear API design (public vs internal)

Suggested endpoints with JSON examples

Flow of how Next.js, Go, Redis, and PostgreSQL work together

https://meabhi.me/blog/section/project/article/chatapp     in the nextjs for the chat app blog page

GO Endpoint are /chat-server/

https://meabhi.me/chat-server


 --- Architecture Roles

Next.js → Public frontend (/demo/chat UI).

Go (chat-server) → Core chat logic (registration, login, message delivery, persistence in PostgreSQL , checkredis and also generate the hash).



--------------------------------------------------- Register page ------------------------------------------

Registration page ---

services used -->

nextjs for url of the. POST https://meabhi.me/demo/chatapp/register

this should call the backend go server to pass the userOne , userTwo , submit 

generate the hash and use redis service and generate the hash and pass to front-end 

Request (from browser → Next.js → → Go):

{
  "userOne": "Abhi",
  "userTwo": "Anny"
}


userOne  --> userOne. in the GO , POST , this should access the GO server for registration to access PGSQL

userTwo  --> userTwo , in the GO , POST , this should access the GO server for registration to access PGSQL

/chat-server/register/submit ---> register , in the GO used. --> internal

example -- POST --> https://meabhi.me/demo/chatapp/register from nextjs to go server 

go server calls the redis and get a hash 

save the data in PGSQL and gives out


Response Json -->

{
  "status": "success",
  "data": {
    "userOne": "Sam",
    "userTwo": "Bob",
    "hash": "abc123"
  }
}



--------------------------------------------------- login page ------------------------------------------


nextjs page for login --> 

https://meabhi.me/demo/chat/user/<hash>   GET request. --> public

Flow --> 

nextjs ---> Go --- > Pgsql --- > autheticate user --> save the cookie in the user 


userName    --->

data : {

userName : "Abhi"
hash : "abc123"

}

login   --->    /chat-server/user/<username>/login.   ---> login the user , POST , Go server validates the data and let the user in  --> internal

send to the api

request to get the url

Go sends back 

data :
{
    status : OK
    code : 200
}



For sending the mesasge 

end point POST https://meabhi.me/chat-server/user/<hash>/message_send. , in the Go server 

userHash by the link , other by Redis getting the data by session data 

session:abc123:Abhi → {
  chat_id: abc123,
  sender: Abhi,
  reciver: Anny,
  last_seen: 2025-07-08T20:00:00,
  ws_connected: 1,
  notify: 0
}

message  ---> 

data : {

  "userHash": "abc123",
  "sender": "Abhi",
  "reciever": "Anny",
  "message": "Hello",
  "timestamp": ISODate()

}

data : {
    status : OK
    code : 200
}

data : {
    status : Failed
    code : 400
}


inp --> message    ---> message goes to the go server through the POST request , redis check if the user is online , save the message in the postgresql and deliver the message  --> internal


/chat-server/user/<hash>/message_send  --> read the message and send the message through the backend of GO 


logout --> /chat-server/user/logout --> to nextjs server for logout , GET request. --> internal

{
  "status": "OK",
  "code": 200
}

clear cookies 


endchat --> /chat-server/user/endchat    ---> to go server and nextjs to delelte the data and nextjs refreshers the page and route to register  . GET request. --> internal


Deletes session from Redis.

Marks chat closed in PostgreSQL.



Notes -- 

- https://gist.githubusercontent.com/patricksavalle/fac25ed914dc2e10f256fdba1af9e622/raw/cf4dd5dc6dc5bb2f7b3af6a2b64fa0fd77d73d34/ns-reference-api.yaml